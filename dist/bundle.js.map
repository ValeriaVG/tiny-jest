{
  "version": 3,
  "sources": ["../src/index.ts", "../src/Test.ts", "../src/expect.ts", "../src/prettify.ts", "../src/browser.ts"],
  "sourcesContent": ["export { default as Test } from \"./Test\";\nexport { default as expect } from \"./expect\";\nexport { default as prettify } from \"./prettify\";\n", "export type TestResult = {\n  title: string;\n  skipped?: boolean;\n  passed?: boolean;\n  error?: Error;\n};\n\nexport type FixtureFn = () => Promise<void> | void;\nexport default class Test {\n  title: string;\n  suite: { title: string; fn?: Function }[] = [];\n  // Stores last results\n  results: TestResult[] = [];\n  private _before: FixtureFn[] = [];\n  private _after: FixtureFn[] = [];\n  constructor(title?: string) {\n    this.title = title ?? \"\";\n  }\n  it = (title: string, fn?: Function) => {\n    this.suite.push({ title, fn });\n  };\n  xit = (title: string, _fn?: Function) => {\n    this.suite.push({ title });\n  };\n  run = async (): Promise<TestResult[]> => {\n    this.results = [];\n    try {\n      await Promise.all(this._before.map((fn) => fn()));\n    } catch (error) {\n      return [{ title: this.title, error, passed: false }];\n    }\n    for (let test of this.suite) {\n      if (!test.fn) {\n        this.results.push({ title: test.title, skipped: true });\n        continue;\n      }\n      try {\n        await test.fn();\n        this.results.push({ title: test.title, passed: true });\n      } catch (error) {\n        this.results.push({ title: test.title, error, passed: false });\n      }\n    }\n    try {\n      await Promise.all(this._after.map((fn) => fn()));\n    } catch (error) {\n      console.error(error);\n    }\n    return this.results;\n  };\n  before = (fn: FixtureFn) => {\n    this._before.push(fn);\n  };\n  after = (fn: FixtureFn) => {\n    this._after.push(fn);\n  };\n}\n", "export class ExpectationError extends Error {\n  extensions: { matcher: string; expected: any; actual: any };\n  constructor(matcher: string, expected: any, actual: any, diff: string) {\n    super(diff);\n    this.extensions = { matcher, expected, actual };\n  }\n}\n\nexport type Expectation<T> = (expected: T) => void;\n\nexport type Expectations = {\n  toBe: Expectation<any>;\n  toEqual: Expectation<any>;\n  toBeTruthy: Expectation<void>;\n  toBeFalsy: Expectation<void>;\n  toMatchObject: Expectation<Object>;\n  toThrow: Expectation<RegExp | void>;\n  toBeGreaterThan: Expectation<number>;\n  toBeGreaterThanOrEqual: Expectation<number>;\n  toBeLessThan: Expectation<number>;\n  toBeLessThanOrEqual: Expectation<number>;\n};\nexport type SyncExpectationResult = {\n  pass: boolean;\n  message(): string;\n};\n\nexport interface Context {\n  isNot: boolean\n}\n\nexport type Matcher = (ctx: Context, actual: any, expected: any) => { pass: boolean, message: () => string };\n\nconst matchers: Record<keyof Expectations, Matcher> = {\n  toBe: (ctx: Context, actual: any, expected: any) => {\n    return {\n      pass: expected === actual,\n      message: () => `Expected ${JSON.stringify(actual)}${ctx.isNot ? ' not' : ''} to be ${JSON.stringify(expected)}`\n    };\n  },\n  toEqual: (ctx: Context, actual: any, expected: any) => {\n    return {\n      pass: expected == actual, message: () => `Expected ${JSON.stringify(actual)}${ctx.isNot ? ' not' : ''} to equal ${JSON.stringify(\n        expected\n      )}`\n    };\n  },\n  toBeTruthy: (ctx: Context, actual: any) => {\n    return { pass: !!actual, message: () => `Expected ${JSON.stringify(actual)}${ctx.isNot ? ' not' : ''} to be truthy` };\n  },\n  toBeFalsy: (ctx: Context, actual: any) => {\n    return { pass: !actual, message: () => `Expected ${JSON.stringify(actual)}${ctx.isNot ? ' not' : ''} to be falsy` };\n  },\n  toMatchObject: (ctx: Context, actual: any, expected: any) => {\n    const error = `Expected ${JSON.stringify(actual)}${ctx.isNot ? ' not' : ''} to match ${JSON.stringify(\n      expected\n    )}`;\n    if (\n      typeof actual !== typeof expected ||\n      Array.isArray(actual) !== Array.isArray(expected)\n    )\n      return { pass: false, message: () => error };\n\n    for (let key in expected) {\n      if (typeof actual[key] !== typeof expected[key])\n        return {\n          pass: false, message: () => `${error}:\\nTypes mismatch for ${key}: ${typeof actual[\n            key\n          ]} != ${typeof expected[key]}`\n        };\n      if (typeof expected[key] !== \"object\") {\n        const res = matchers.toBe(ctx, actual[key], expected[key]);\n        if (!res.pass)\n          return {\n            pass: false, message: () => `${error}: Mismatched \"${key}\": ${JSON.stringify(\n              actual[key]\n            )} != ${JSON.stringify(expected[key])}`\n          };\n        continue;\n      }\n      const res = matchers.toMatchObject(ctx, actual[key], expected[key]);\n      if (!res.pass) return res;\n    }\n    return { pass: true, message: () => error };\n  },\n  toThrow: (ctx: Context, fn: Function, expression?: RegExp) => {\n    const error = `Expected ${fn.toString()}${ctx.isNot ? ' not' : ''} to throw error ${expression && ` matching ${expression.toString()}`}`;\n    try {\n      fn();\n      return {\n        pass: false, message: () => error\n      };\n    } catch (err) {\n      if (!expression || expression.test(err.toString())) return { pass: true, message: () => error };\n      return {\n        pass: false, message: () => `Expected ${fn.toString()}${ctx.isNot ? ' not' : ''} to throw error ${expression &&\n          ` matching ${expression.toString()}, but got ${err.toString()} instead`\n          }`\n      };\n    }\n  },\n  toBeGreaterThan: (ctx: Context, actual: any, expected: any) => {\n    return {\n      pass: actual > expected, message: () => `Expected ${JSON.stringify(actual)}${ctx.isNot ? ' not' : ''} to be greater than ${JSON.stringify(\n        expected\n      )}`\n    };\n  },\n  toBeGreaterThanOrEqual: (ctx: Context, actual: any, expected: any) => {\n    return {\n      pass: actual >= expected, message: () => `Expected ${JSON.stringify(\n        actual\n      )}${ctx.isNot ? ' not' : ''} to be greater than or equal ${JSON.stringify(expected)}`\n    };\n  },\n  toBeLessThan: (ctx: Context, actual: any, expected: any) => {\n    return {\n      pass: actual < expected, message: () => `Expected ${JSON.stringify(actual)}${ctx.isNot ? ' not' : ''} to be less than ${JSON.stringify(\n        expected\n      )}`\n    };\n  },\n  toBeLessThanOrEqual: (ctx: Context, actual: any, expected: any) => {\n    return {\n      pass: actual <= expected, message: () => `Expected ${JSON.stringify(\n        actual\n      )}${ctx.isNot ? ' not' : ''} to be less than or equal ${JSON.stringify(expected)}`\n    };\n  }\n};\n\nexport default function expect(\n  actual: any\n): Expectations & { not: Expectations } {\n  const expectation: any = {\n    not: {},\n  };\n  (Object.keys(matchers) as Array<keyof Expectations>).forEach((matcher) => {\n    expectation[matcher] = (expected: any) => {\n      const result = matchers[matcher]({ isNot: false }, actual, expected);\n      if (!result.pass)\n        throw new ExpectationError(matcher, expected, actual, result.message());\n    };\n    expectation.not[matcher] = (expected: any) => {\n      const result = matchers[matcher]({ isNot: true }, actual, expected);\n      if (result.pass)\n        throw new ExpectationError(\n          matcher,\n          expected,\n          actual,\n          result.message()\n        );\n    };\n  });\n  return expectation;\n}\n\nexpect.extend = (extensions: Record<string, Expectation<any>>) => {\n  Object.assign(matchers, extensions)\n}", "import { TestResult } from \"./test\";\n\nexport default function prettify(testResults: TestResult[]) {\n  testResults.forEach(({ title, passed, skipped, error }) => {\n    if (passed) return console.info(\"\\x1b[32m\", `\u2713 ${title}`);\n    if (skipped) return console.info(\"\\x1b[33m\", `\u25A1 ${title}`);\n    if (!passed)\n      return console.error(\n        \"\\x1b[31m\",\n        `\uD800\uDD02 ${title}`,\n        \"\\n  Failed:\",\n        error!.message\n      );\n  });\n  console.log(\"\\x1b[0m\");\n}\n", "import * as tinyJest from \"./index\";\n//@ts-ignore\nwindow[\"tinyJest\"] = tinyJest;\n"],
  "mappings": "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",
  "names": []
}
